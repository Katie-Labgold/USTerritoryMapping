table(census.uninsured19$Percent.Cat)
head(census.uninsured19$STUSPS)
colors.census <- c("Less than 5%" = "#feebe2",
"5% to <10%" = "#f768a1",
"10% or Greater" = "#7a0177")
border <- c("OR", "WI", "VA", "VI")
map1_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
border_ids = border,
border_color = "red",
border_linewidth = 1,
save.filepath = "saved-maps/map1-uninsure2.png")
colors.cdc <- c("Q1 (166 to < 198)" = "#ffffcc",
"Q2 (198 to < 215)" = "#a1dab4",
"Q3 (215 to < 248)" = "#41b6c4",
"Q4 (248 to 326)" = "#225ea8")
map1_categorical(data = cdc.cvd,
join_var = "LocationAbbr",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
inset_box_color = "white",
legend_name = "CVD Mortality per 100,000",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/map1-cvd.png")
map2_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
border_ids = border,
border_color = "red",
border_linewidth = 1,
save.filepath = "saved-maps/map2-uninsure.png")
map2_categorical <- function(data, join_var, fill_var, fill_color, fill_linewidth = 0.8, fill_linecolor = "black",
legend_name = NULL, inset_box_color = "black",
title = "",
border_ids = NULL, border_color = NULL, border_linewidth = 1,
save.filepath){
all.geo.data <- all.geo %>%
left_join(data, by = c("STUSPS" = join_var))
main.map <- all.geo.data %>%
filter(group == "mainland") %>%
st_transform(5070) %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
labs(title = title,
#caption = "Caption"
) +
geom_sf(
data = all.geo.data[all.geo.data$group == "mainland" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = c(0.97, 1.15)
) +
theme(
plot.background = element_rect(fill = "white", colour = "white"),
plot.title = element_text(family = "Arial", size = 25, face = "bold",
margin = margin(b = 50), hjust = -0.2),
legend.title = element_text(family = "Arial", size = 16),
legend.text = element_text(family = "Arial", size = 14),
#plot.caption = element_text(family = "Arial", vjust = -1, hjust = 1, face = "italic"),
plot.margin = unit(c(t = 2, r = 7, b = 2.5, l = 7), "cm") # testing different margins
)
## Alaska ----
ak.map <- all.geo.data %>%
filter(group == "AK") %>%
st_transform(3338) %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "AK" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Hawaii ----
hi.map <- all.geo.data %>%
filter(group == "HI") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "HI" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Guam ----
gu.map <- all.geo.data %>%
filter(group == "GU") %>%
ggplot() +
geom_sf(
fill = "white",
linewidth = 0,
colour = "white"
) +
geom_sf_label(aes(label = STUSPS,
fill = fill_var),
lwd = 5) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## American Samoa ----
as.map <- all.geo.data %>%
filter(group == "AS") %>%
ggplot() +
geom_sf(
fill = "white",
linewidth = 0,
colour = "white"
) +
geom_sf_label(aes(label = STUSPS,
fill = fill_var),
size = 5) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Northern Mariana Islands ----
nmi.map <- all.geo.data %>%
filter(group == "MP") %>%
ggplot() +
geom_sf(
fill = "white",
linewidth = 0,
colour = "white"
) +
geom_sf_label(aes(label = STUSPS,
fill = fill_var),
size = 5) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## PR ----
pr.map <- all.geo.data %>%
filter(group == "PR") %>%
ggplot() +
geom_sf(
fill = "white",
linewidth = 0,
colour = "white"
) +
geom_sf_label(aes(label = STUSPS,
fill = fill_var),
size = 5) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## VI ----
VI.map <- all.geo.data %>%
filter(group == "VI.stx") %>%
ggplot() +
geom_sf(
fill = "white",
linewidth = 0,
colour = "white"
) +
geom_sf_label(aes(label = STUSPS,
fill = fill_var),
size = 5) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
# Final Map ----
p <- ggdraw(main.map) +
# Adding AK
draw_plot(
{
ak.map +
theme(legend.position = "none",
plot.background = element_rect(color = "black", linewidth = 0.7), # if you want a border
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0.5, l = 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.07,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.04,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding HI
draw_plot(
{
hi.map +
theme(legend.position = "none",
plot.background = element_rect(color = "black", linewidth = 0.7),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.26,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.04,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.15,
height = 0.15) +
# Adding GU
draw_plot(
{
gu.map +
theme(legend.position = "none",
#plot.background = element_rect(color = "black"), # if you want a border
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.763,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.185,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding AS
draw_plot(
{
as.map +
theme(legend.position = "none",
#plot.background = element_rect(color = "black"), # if you want a border
plot.margin = unit(c(0.4, 0.4, 0.4, 0.4), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.828,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.24,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding NMI
draw_plot(
{
nmi.map +
theme(legend.position = "none")
#plot.background = element_rect(color = "black"), # if you want a border
#plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.701,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.229,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.4,
height = 0.4) +
# Adding PR
draw_plot(
{
pr.map +
theme(legend.position = "none"#,
#plot.background = element_rect(color = "black"),
#plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")
) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.794,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.15,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
# Adding VI (STT & STJ)
draw_plot(
{
VI.map +
theme(legend.position = "none"#,
#plot.background = element_rect(color = "black"),
#plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")
) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.828,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.135,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.05,
height = 0.05)
p
save_plot(filename = save.filepath,
plot = p,
base_width = 15.91,
base_height = 9.1951
)
}
map2_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
border_ids = border,
border_color = "red",
border_linewidth = 1,
save.filepath = "saved-maps/map2-uninsure.png")
devtools::install()
library(USTerritoryMapping)
data(census.uninsured19)
data(cdc.cvd)
colors.census <- c("Less than 5%" = "#feebe2",
"5% to <10%" = "#f768a1",
"10% or Greater" = "#7a0177")
border <- c("OR", "WI", "VA", "VI")
map2_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
border_ids = border,
border_color = "red",
border_linewidth = 1,
save.filepath = "saved-maps/map2-uninsure.png")
View(census.uninsured19)
data(all.geo)
devtools::install()
library(USTerritoryMapping)
map2_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
border_ids = border,
border_color = "red",
border_linewidth = 1,
save.filepath = "saved-maps/map2-uninsure.png")
devtools::build_vignettes()
sysfonts::font_add_google("Zilla Slab", "pf", regular.wt = 500)
library(hexSticker)
library(hexSticker)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 8, h_size = 1.2, p_family = "pf",
p_color = "#F3BA42", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 15, h_size = 1.2, p_family = "pf",
p_color = "#7DBC8E", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 15, h_size = 1.2, p_family = "pf",
p_color = "#7DBC8E", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 15, h_size = 1.2, p_family = "pf",
p_color = "#7DBC8E", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 14, h_size = 1.2, p_family = "pf",
p_color = "#F3BA42", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 14, h_size = 1.2, p_family = "pf",
p_color = "#F3BA42", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 16, h_size = 1.2, p_family = "pf",
p_color = "#F3BA42", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
hexSticker::sticker(
subplot = ~ plot.new(), s_x = 1, s_y = 1, s_width = 0.1, s_height = 0.1,
package = "USTerritoryMapping", p_x = 1, p_y = 1, p_size = 14, h_size = 1.2, p_family = "pf",
p_color = "#7DBC8E", h_fill = "#FFF9F2", h_color = "#F3BA42",
dpi = 320, filename = "man/figures/logo.png"
)
magick::image_read("man/figures/logo.png")
magick::image_read("man/figures/logov2.png")
library(USTerritoryMapping)
library(roxygen2)
library(USTerritoryMapping)
library(USTerritoryMapping)
data(all.geo)
# Make internal data
usethis::use_data(all.geo, internal = TRUE, compress = TRUE)
library(USTerritoryMapping)
remove.packages("USTerritoryMapping", lib="~/R/win-library/4.1")
??USTerritoryMapping
?USTerritoryMapping
?map1_categorical()
?map1_categorical
library(USTerritoryMapping)
??USTerritoryMapping
?map1_categorical
