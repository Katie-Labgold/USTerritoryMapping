colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "GU" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## American Samoa ----
as.map <- all.geo.data %>%
filter(group == "AS") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "AS" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Northern Mariana Islands ----
nmi.map <- all.geo.data %>%
filter(group == "MP") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "MP" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## PR ----
pr.map <- all.geo.data %>%
filter(group == "PR") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "PR" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## VI ----
VI.sttstj.map <- all.geo.data %>%
filter(group == "VI.stt_stj") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "VI.stt_stj" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
VI.stx.map <- all.geo.data %>%
filter(group == "VI.stx") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "VI.stx" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
# add square for USVI ----
rect <- rectGrob(
x = unit(12.73, "in"),
#y = unit(1, "npc") - unit(1, "in"),
y = unit(1.6, "in"),
width = unit(1.6, "in"),
height = unit(1.25, "in"),
hjust = 0, vjust = 1,
gp = gpar(col = inset_box_color, fill = "transparent")
)
# Final Map ----
plot <-  ggdraw(main.map) +
# territory labels ----
draw_label("MP", x = 0.12, y = 0.24, fontface = "bold", color = territory_label_color) +
draw_label("GU", x = 0.175, y = 0.24, fontface = "bold", color = territory_label_color) +
draw_label("AS", x = 0.52, y = 0.034, fontface = "bold", color = territory_label_color) +
draw_label("VI", x = 0.893, y = 0.05, fontface = "bold", color = territory_label_color) +
draw_label("PR", x = 0.89, y = 0.2, fontface = "bold", color = territory_label_color) +
# Adding AK
draw_plot(
{
ak.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0.5, l = 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.05,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding HI
draw_plot(
{
hi.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.239,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.15,
height = 0.15) +
# Adding GU
draw_plot(
{
gu.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.111,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.23,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
# Adding AS
draw_plot(
{
as.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.4, 0.4, 0.4, 0.4), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.381,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = -0.0199,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.15,
height = 0.15) +
# Adding NMI
draw_plot(
{
nmi.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = -0.008,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.23,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding PR
draw_plot(
{
pr.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.175,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
# Adding VI (STT & STJ)
draw_plot(
{
VI.sttstj.map +
theme(legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.08,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
draw_plot(
{
VI.stx.map +
theme(legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
draw_grob(rect)
save_plot(filename = save.filepath,
plot = plot,
base_width = 15.91, # in
base_height = 9.1951 #
)
}
map2_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
inset_box_color = "white",
legend_name = "CVD Mortality Rate\nper 100,000 persons",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "C:/Users/tqo3/Pictures/map2-cvd.png")
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
inset_box_color = "white",
territory_label_color = "white",
legend_name = "CVD Mortality Rate\nper 100,000 persons",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "C:/Users/tqo3/Pictures/map1-cvd.png")
library(USTerritoryMapping)
use_mit_license(copyright_holder = NULL)
usethis::use_mit_license(copyright_holder = NULL)
library(USTerritoryMapping)
remove.packages("USTerritoryMapping", lib="~/R/win-library/4.1")
library(USTerritoryMapping)
USTerritoryMapping::map2_categorical(data = NULL)
colors.cdc <- c("Q1 (166 to < 198)" = "white",
"Q2 (198 to < 215)" = "white",
"Q3 (215 to < 248)" = "white",
"Q4 (248 to 326)" = "white",
"Data Not Available" = "white")
# See vignette for data `cdc.cvd` preparation details
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "darkgrey",
inset_box_color = "white",
legend_name = "CVD per 100,000",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/cdc-map1-test.png")
data(cdc.cvd)
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "darkgrey",
inset_box_color = "white",
legend_name = "CVD per 100,000",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/cdc-map1-test.png")
data("fips_codes")
cdc.cvd <- fips_codes %>%
left_join(cdc.cvd, by = c("state" = "LocationAbbr")) %>%
mutate(data.cat = factor(
case_when(
Data_Value < 198 ~ "Q1 (166 to < 198)",
Data_Value >= 198 & Data_Value < 215 ~ "Q2 (198 to < 215)",
Data_Value >= 215 & Data_Value < 248 ~ "Q3 (215 to < 248)",
Data_Value >= 248 & Data_Value < 400 ~ "Q4 (248 to 326)",
is.na(Data_Value) ~ "Data Not Available"
),
levels = c("Q1 (166 to < 198)", "Q2 (198 to < 215)",
"Q3 (215 to < 248)", "Q4 (248 to 326)", "Data Not Available")
)
)
table(cdc.cvd$data.cat)
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
inset_box_color = "white",
territory_label_color = "white",
legend_name = "CVD Mortality Rate\nper 100,000 persons",
border_ids = border,
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/map1-cvd.png")
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
territory_label_color = "white",
legend_name = "CVD Mortality Rate\nper 100,000 persons",
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/map1-cvd.png")
)
map1_categorical(data = cdc.cvd,
join_var = "state",
fill_var = "data.cat",
fill_color = colors.cdc,
fill_linewidth = 1.2,
fill_linecolor = "black",
territory_label_color = "white",
legend_name = "CVD Mortality Rate\nper 100,000 persons",
border_color = "red",
border_linewidth = 1.5,
save.filepath = "saved-maps/map1-blank.png")
)
`usethis::use_testthat()`
usethis::use_testthat()
?use_test
use_test(open = rlang::is_interactive())
usethis:;use_test(open = rlang::is_interactive())
usethis::use_test(open = rlang::is_interactive())
use_test(open = rlang::is_interactive())
usethis::use_test(open = rlang::is_interactive())
usethis::use_test()
usethis::use_test(open = rlang::is_interactive())
usethis::use_test("cdc.cvd")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(usethis)
library(USTerritoryMapping)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(USTerritoryMapping)
data(census.uninsured19)
data(cdc.cvd)
class(census.uninsured19$Percent.Cat)
table(census.uninsured19$Percent.Cat)
head(census.uninsured19$STUSPS)
data("fips_codes")
cdc.cvd <- fips_codes %>%
left_join(cdc.cvd, by = c("state" = "LocationAbbr")) %>%
mutate(data.cat = factor(
case_when(
Data_Value < 198 ~ "Q1 (166 to < 198)",
Data_Value >= 198 & Data_Value < 215 ~ "Q2 (198 to < 215)",
Data_Value >= 215 & Data_Value < 248 ~ "Q3 (215 to < 248)",
Data_Value >= 248 & Data_Value < 400 ~ "Q4 (248 to 326)",
is.na(Data_Value) ~ "Data Not Available"
),
levels = c("Q1 (166 to < 198)", "Q2 (198 to < 215)",
"Q3 (215 to < 248)", "Q4 (248 to 326)", "Data Not Available")
)
)
table(cdc.cvd$data.cat)
class(cdc.cvd$data.cat)
colors.census <- c("Less than 5%" = "#feebe2",
"5% to <10%" = "#f768a1",
"10% or Greater" = "#7a0177")
map1_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
territory_label_color = "black",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
save.filepath = "saved-maps/map1-uninsure.png")
map1_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
territory_label_color = "black",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
save.filepath = "saved-maps/map1-uninsure.png")
map1_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
territory_label_color = "black",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
save.filepath = "saved-maps/map1-uninsure.png")
map1_categorical(data = census.uninsured19,
join_var = "STUSPS",
fill_var = "Percent.Cat",
fill_color = colors.census,
legend_name = "Percent Uninsured",
territory_label_color = "black",
title = "Figure 1. Percent Uninsured, Ages <19 Years",
save.filepath = "saved-maps/map1-uninsure-t2.png")
library(USTerritoryMapping)
library(USTerritoryMapping)
USTerritoryMapping::map1_categorical()
library(USTerritoryMapping)
