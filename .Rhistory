rbind(MP) %>%
rbind(AS) %>%
rbind(VI.stx) %>% #later use starts with "VI."
rbind(VI.stt_stj)
rm(mainland, HI, AK, PR, GU, MP, AS, VI.stx, VI.stt_stj)
plot(mainland$geometry)
mainland <- us %>%
filter(st %notin% oconus.list) %>%
#st_transform(5070) %>%  # bring back in the map portion
dplyr::select(st, co) %>%
#rename("st" = "STATEFP") %>%
mutate(group = "mainland")
plot(mainland$geometry)
plot(GU$geometry)
View(fips_codes)
load("data-raw/fips_codes.rda")
data(fips_codes)
force(fips_codes)
save(fips_codes, "data-raw/fips_codes_co.rda")
save("data-raw/fips_codes_co.rda", fips_codes)
save(fips_codes, file = "data-raw/fips_codes_co.rda")
load("data-raw/fips_codes_co.rda")
# Prepare overarching file: ----
all.geo.co <- mainland.co %>%
rbind(HI.co) %>%
rbind(AK.co) %>%
rbind(PR.co) %>%
rbind(GU.co) %>%
rbind(MP.co) %>%
rbind(AS.co) %>%
rbind(VI.stx.co) %>% #later use starts with "VI."
rbind(VI.stt_stj.co) %>%
left_join(fips_codes, by = c("st" = "state_code",
"co" = "county_code"
)) %>%
rename("STUSPS" = "st")
USTerritoryMapping::data("fips_codes")
data("fips_codes")
force(fips_codes)
map1_categorical_county <- function(data, join_var, fill_var, fill_color, fill_linewidth = 0.8, fill_linecolor = "black",
legend_name = NULL, inset_box_color = "black",
territory_label_color = "black",
title = "",
border_ids = NULL, border_color = NULL, border_linewidth = 1,
save.filepath){
all.geo.data <- all.geo.co %>%
left_join(data, by = c("STUSPS" = join_var))
main.map <- all.geo.data %>%
filter(group == "mainland") %>%
st_transform(5070) %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name,
drop = FALSE) +
labs(title = title,
#caption = "Caption"
) +
geom_sf(
data = all.geo.data[all.geo.data$group == "mainland" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = c(0.93, 1.23)
) +
theme(
plot.background = element_rect(fill = "white", colour = "white"),
plot.title = element_text(family = "Arial", size = 25, face = "bold",
margin = margin(b = 50), hjust = -0.2),
legend.title = element_text(family = "Arial", size = 16),
legend.text = element_text(family = "Arial", size = 14),
#plot.caption = element_text(family = "Arial", vjust = -1, hjust = 1, face = "italic"),
plot.margin = unit(c(t = 2, r = 5.5, b = 2.5, l = 5.5), "cm") # testing different margins
)
## Alaska ----
ak.map <- all.geo.data %>%
filter(group == "AK") %>%
st_transform(3338) %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "AK" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Hawaii ----
hi.map <- all.geo.data %>%
filter(group == "HI") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "HI" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Guam ----
gu.map <- all.geo.data %>%
filter(group == "GU") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "GU" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## American Samoa ----
as.map <- all.geo.data %>%
filter(group == "AS") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "AS" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## Northern Mariana Islands ----
nmi.map <- all.geo.data %>%
filter(group == "MP") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "MP" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## PR ----
pr.map <- all.geo.data %>%
filter(group == "PR") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "PR" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
## VI ----
VI.sttstj.map <- all.geo.data %>%
filter(group == "VI.stt_stj") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "VI.stt_stj" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
VI.stx.map <- all.geo.data %>%
filter(group == "VI.stx") %>%
ggplot() +
geom_sf(
aes(fill = get(fill_var)),
linewidth = fill_linewidth,
colour = fill_linecolor
) +
scale_fill_manual(values = fill_color,
na.value = "grey80",
name = legend_name) +
geom_sf(
data = all.geo.data[all.geo.data$group == "VI.stx" & all.geo.data$STUSPS %in% border_ids, ],
fill = NA,
colour = border_color,
linewidth = border_linewidth
) +
# Prevent ggplot from slightly expanding the map limits beyond the bounding box of the spatial objects
coord_sf(expand = FALSE) +
theme_void() +
theme(
# legend.justification defines the edge of the legend that the legend.position coordinates refer to
legend.justification = c(0, 1),
# Set the legend flush with the left side of the plot, and just slightly below the top of the plot
legend.position = "none"
) +
theme(
text = element_text(family = "Arial")
)
# add square for USVI ----
rect <- rectGrob(
x = unit(12.73, "in"),
#y = unit(1, "npc") - unit(1, "in"),
y = unit(1.6, "in"),
width = unit(1.6, "in"),
height = unit(1.25, "in"),
hjust = 0, vjust = 1,
gp = gpar(col = inset_box_color, fill = "transparent")
)
# Final Map ----
plot <-  ggdraw(main.map) +
# territory labels ----
draw_label("MP", x = 0.12, y = 0.24, fontface = "bold", color = territory_label_color) +
draw_label("GU", x = 0.175, y = 0.24, fontface = "bold", color = territory_label_color) +
draw_label("AS", x = 0.52, y = 0.034, fontface = "bold", color = territory_label_color) +
draw_label("VI", x = 0.893, y = 0.05, fontface = "bold", color = territory_label_color) +
draw_label("PR", x = 0.89, y = 0.2, fontface = "bold", color = territory_label_color) +
# Adding AK
draw_plot(
{
ak.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0.5, l = 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.05,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding HI
draw_plot(
{
hi.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.239,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.15,
height = 0.15) +
# Adding GU
draw_plot(
{
gu.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.111,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.23,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
# Adding AS
draw_plot(
{
as.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.4, 0.4, 0.4, 0.4), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.381,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = -0.0199,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.15,
height = 0.15) +
# Adding NMI
draw_plot(
{
nmi.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7), # if you want a border
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = -0.008,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.23,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.2,
height = 0.2) +
# Adding PR
draw_plot(
{
pr.map +
theme(legend.position = "none",
plot.background = element_rect(color = inset_box_color, linewidth = 0.7),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.175,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
# Adding VI (STT & STJ)
draw_plot(
{
VI.sttstj.map +
theme(legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.08,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
draw_plot(
{
VI.stx.map +
theme(legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) # testing different margins)
},
# The distance along a (0,1) x-axis to draw the left edge of the plot
x = 0.8,
# The distance along a (0,1) y-axis to draw the bottom edge of the plot
y = 0.02,
# The width and height of the plot expressed as proportion of the entire ggdraw object
width = 0.1,
height = 0.1) +
draw_grob(rect)
save_plot(filename = save.filepath,
plot = plot,
base_width = 15.91, # in
base_height = 9.1951 #
)
}
# Download and prep data for rbind
acs5 <- load_variables(year = 2020, "acs5")
dpvi <- load_variables(year = 2020, "dpvi")
fips <- fips_codes %>% group_by(state) %>% slice(1)
vars.acs <- c("B18135_002", "B18135_007", "B18135_012") # Estimate!!Total:!!Under 19 years:
vars.dpvi <- c("DP3_0071P") #Percent!!HEALTH INSURANCE COVERAGE STATUS!!Civilian population under 19 years in households!!No health insurance coverage
states <- get_acs(year = 2020, output = "wide", variables = vars.acs,
geography = "county", sumfile = "acs5")
fips <- fips_codes %>% group_by(state) %>% slice(1)
fips <- fips_codes_county %>% group_by(state) %>% slice(1)
fips <- fips_codes #%>% group_by(state) %>% slice(1)
mutate(county_name = paste0(county, ", ", state_name)
View(fips)
fips <- fips_codes %>%
mutate(county_name = paste0(county, ", ", state_name))
states <- get_acs(year = 2020, output = "wide", variables = vars.acs,
geography = "county", sumfile = "acs5") %>% # includes PR
left_join(fips, by = c("NAME" = "county_name")) %>%
mutate(
"Percent Ages 19 or Under with No Insurance" = round(((B18135_007E + B18135_012E)/B18135_002E)*100, 1),
STUSPS = state) %>%
dplyr::select(GEOID, NAME, `Percent Ages 19 or Under with No Insurance`, STUSPS)
VI <- get_decennial(year = 2020, output = "wide", variables = vars.dpvi, state = "VI",
geography = "state", sumfile = "dpvi") %>%
mutate(STUSPS = "VI") %>%
rename("Percent Ages 19 or Under with No Insurance" = "DP3_0071P")
GU <- get_decennial(year = 2020, output = "wide", variables = vars.dpvi, state = "GU",
geography = "state", sumfile = "dpgu") %>%
mutate(STUSPS = "GU") %>%
rename("Percent Ages 19 or Under with No Insurance" = "DP3_0071P")
cdc.cvd <- rio::import("cdcwonder_cardiovasculardisease.csv")
cdc.cvd <- rio::import("data-raw/cdcwonder_cardiovasculardisease.csv") %>%
filter(!is.na(ID), # remove empty rows
LocationAbbr != "US") %>% # remove total US value
dplyr::select(LocationAbbr, Data_Value)  %>%
mutate(data.cat = case_when(
Data_Value < 198 ~ "Q1 (166 to < 198)",
Data_Value >= 198 & Data_Value < 215 ~ "Q2 (198 to < 215)",
Data_Value >= 215 & Data_Value < 248 ~ "Q3 (215 to < 248)",
Data_Value >= 248 & Data_Value < 400 ~ "Q4 (248 to 326)"
))
cdc.cvd <- rio::import("data-raw/cdcwonder_cardiovasculardisease.csv")
View(cdc.cvd)
